**Diagramme de Séquence : Gestion des Paiements Multiples pour une Vente Différée**

**Acteurs :** Utilisateur, Navigateur Web, Serveur Web (PHP)

**Composants :**
*   Navigateur Web
*   Routeur (`public/index.php`)
*   `SaleController.php`
*   `SaleModel.php`
*   `SalePaymentModel.php`
*   `Database.php` (Classe Core)
*   Base de Données (PostgreSQL)
*   Vue (`sales/manage_payments.php`, `sales/show.php`, `layouts/main.php`)

**Séquence :**

1.  **Utilisateur -> Navigateur Web :**
    *   Depuis la page d'une vente (`sales/show/{id}`) ou la liste des ventes, clique sur "Gérer les Paiements" pour une vente différée.
    *   Requête GET (ex: `index.php?url=sale/manage_payments/123` où 123 est `$saleId`).

2.  **Navigateur Web -> Serveur Web (Routeur) :**
    *   Le Routeur appelle `SaleController::manage_payments($saleId)`.

3.  **Routeur -> `SaleController::manage_payments($saleId)` :**
    *   `SaleController` charge `SaleModel` et `SalePaymentModel`.
    *   Appelle `SaleModel->getByIdWithDetails($saleId)` pour obtenir les détails de la vente (incluant `total_amount`, `paid_amount`).
    *   Si vente non trouvée ou non applicable (ex: déjà payée et type immédiat), affiche une erreur.
    *   Appelle `SalePaymentModel->getPaymentsForSale($saleId)` pour obtenir l'historique des paiements.
    *   Calcule `$remainingBalance = $sale['total_amount'] - $sale['paid_amount']`.
    *   Appelle `renderView('sales/manage_payments', $data)` avec `$sale`, `$payments_history`, `$remainingBalance`, méthodes de paiement autorisées, etc.

4.  **`SaleController` -> Vue (`sales/manage_payments.php`) :**
    *   La vue affiche les détails de la vente (total, payé, solde), l'historique des paiements, et un formulaire pour ajouter un nouveau paiement.

5.  **Utilisateur -> Navigateur Web (Formulaire d'ajout de paiement) :**
    *   Remplit les champs : date du paiement, montant payé, méthode, remarques.
    *   Clique sur "Enregistrer le Paiement".
    *   Requête POST (`index.php?url=sale/store_payment`) avec `sale_id` (caché) et les données du paiement.

6.  **Navigateur Web -> Serveur Web (Routeur) :**
    *   Le Routeur appelle `SaleController::store_payment()`.

7.  **Routeur -> `SaleController::store_payment()` :**
    *   Récupère les données POST (`sale_id`, `payment_date`, `amount_paid`, `payment_method`, `notes`).
    *   Valide les données : `sale_id` existe, `amount_paid` > 0, `amount_paid` <= solde restant (pour éviter surpaiement simple).
        *   Si validation échoue : Recharge la vue `sales/manage_payments.php` (via `manage_payments($saleId)`) avec erreurs et données soumises.
    *   Si validation réussit : Appelle `SalePaymentModel->createPayment($paymentData)`.

8.  **`SaleController` -> `SalePaymentModel::createPayment($paymentData)` :**
    *   Le modèle `SalePaymentModel.php` construit une requête SQL INSERT pour `sale_payments`.
    *   Appelle `Database->insert()`. Retourne `$paymentId` ou `false`.

9.  **`SalePaymentModel` -> `Database::insert()` :**
    *   Exécution de la requête INSERT.

10. **`Database` -> `SalePaymentModel` :**
    *   Retourne `$paymentId` ou `false`.

11. **`SalePaymentModel` -> `SaleController` :**
    *   Retourne `$paymentId` ou `false`.

12. **`SaleController::store_payment()` (suite) :**
    *   Si `$paymentId` est valide (paiement créé) :
        *   Appelle `SaleModel->updateSalePaymentStatus($saleId)`.
            *   `SaleModel::updateSalePaymentStatus($saleId)` :
                *   Appelle `SalePaymentModel->getTotalPaidForSale($saleId)`.
                *   Récupère `$sale['total_amount']`.
                *   Détermine le nouveau `payment_status` ('pending', 'partially_paid', 'paid').
                *   UPDATE la table `sales` avec le nouveau `payment_status` et `paid_amount`.
        *   Si `updateSalePaymentStatus` échoue, enregistre une erreur (mais le paiement est déjà créé).
        *   Redirige vers `sale/manage_payments/$saleId` avec un message de succès.
    *   Si `createPayment` a échoué : Recharge la vue `sales/manage_payments.php` avec un message d'erreur général.

13. **Navigateur Web :**
    *   Suit la redirection et affiche la page de gestion des paiements mise à jour (avec le nouveau paiement et le solde actualisé) ou le formulaire avec erreurs.

**Fin de la Séquence.**
