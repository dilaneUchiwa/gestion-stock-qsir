**Diagramme de Séquence : Création d'un Produit**

**Acteurs :** Utilisateur, Navigateur Web, Serveur Web (PHP)

**Composants :**
*   Navigateur Web
*   Routeur (`public/index.php`)
*   `ProductsController.php`
*   `Product.php` (Modèle)
*   `StockMovement.php` (Modèle)
*   `Database.php` (Classe Core)
*   Base de Données (PostgreSQL)
*   Vue (`products/create.php`, `products/show.php`, `layouts/main.php`)

**Séquence :**

1.  **Utilisateur -> Navigateur Web :**
    *   Clique sur "Ajouter Produit" (ou un lien similaire).
    *   Le navigateur envoie une requête GET (ex: `index.php?url=products/create`).

2.  **Navigateur Web -> Serveur Web (Routeur) :**
    *   Le serveur reçoit la requête GET.
    *   Le Routeur (`public/index.php`) analyse l'URL.
    *   Il détermine que `ProductsController` et sa méthode `create()` doivent être appelés.

3.  **Routeur -> `ProductsController::create()` :**
    *   Le contrôleur est instancié.
    *   La méthode `create()` est exécutée.
    *   `ProductsController` peut charger des données initiales si nécessaire (ex: liste des produits parents via `ProductModel->getAll()` pour le selecteur de parent).
    *   `ProductsController` appelle `renderView('products/create', $data)`.

4.  **`ProductsController` -> Vue (`products/create.php`, `layouts/main.php`) :**
    *   La vue `products/create.php` est rendue, insérée dans le layout `main.php`.
    *   Un formulaire HTML pour la création de produit est affiché.

5.  **Utilisateur -> Navigateur Web :**
    *   Remplit les champs du formulaire (nom, description, prix, stock initial, etc.).
    *   Clique sur le bouton "Soumettre" (ou "Ajouter Produit").
    *   Le navigateur envoie une requête POST (ex: `index.php?url=products/store`) avec les données du formulaire.

6.  **Navigateur Web -> Serveur Web (Routeur) :**
    *   Le serveur reçoit la requête POST.
    *   Le Routeur analyse l'URL et détermine que `ProductsController` et sa méthode `store()` doivent être appelés.

7.  **Routeur -> `ProductsController::store()` :**
    *   La méthode `store()` est exécutée.
    *   Les données POST (`$_POST`) sont récupérées et validées.
        *   Si validation échoue : `ProductsController` recharge la vue `products/create.php` avec les erreurs et les données soumises. Retour à l'étape 4 (avec erreurs affichées).
    *   Si validation réussit : `ProductsController` appelle `ProductModel->create($data)`.

8.  **`ProductsController` -> `ProductModel::create($data)` :**
    *   Le modèle `Product.php` reçoit les données validées.
    *   Il construit une requête SQL INSERT pour la table `products`.
    *   Il interagit avec `Database.php` pour exécuter la requête.

9.  **`ProductModel` -> `Database::insert($sql, $params)` :**
    *   La classe `Database` exécute la requête SQL INSERT.
    *   Retourne l'ID du nouveau produit inséré (ou false en cas d'échec).

10. **`Database` -> `ProductModel` :**
    *   L'ID du nouveau produit (ou l'échec) est retourné au modèle.

11. **`ProductModel` -> `ProductsController` :**
    *   Le modèle retourne l'ID du nouveau produit (ou l'échec) au contrôleur.

12. **`ProductsController::store()` (suite) :**
    *   Si la création du produit a réussi (`$productId` est valide) ET si un stock initial (`$data['quantity_in_stock']`) a été fourni et est > 0 :
        *   `ProductsController` instancie `StockMovementModel`.
        *   `ProductsController` appelle `StockMovementModel->createMovement([...])` avec :
            *   `product_id = $productId`
            *   `type = 'initial_stock'`
            *   `quantity = $data['quantity_in_stock']`
            *   `notes = 'Initial stock set during product creation.'`
        *   (Note: `ProductModel->create()` est supposé avoir déjà mis à jour `products.quantity_in_stock` dans la table `products`.)

13. **`ProductsController` -> `StockMovementModel::createMovement($data)` :**
    *   Le modèle `StockMovement.php` construit une requête SQL INSERT pour la table `stock_movements`.
    *   Il interagit avec `Database.php` pour exécuter la requête.

14. **`StockMovementModel` -> `Database::insert($sql, $params)` :**
    *   La classe `Database` exécute la requête SQL INSERT pour le mouvement de stock.

15. **`Database` -> `StockMovementModel` :**
    *   Retourne le succès/échec de l'insertion du mouvement.

16. **`StockMovementModel` -> `ProductsController` :**
    *   Retourne le succès/échec au contrôleur.

17. **`ProductsController::store()` (fin) :**
    *   Si tout a réussi :
        *   `ProductsController` effectue une redirection HTTP vers la page de visualisation du produit (ex: `index.php?url=products/show/$productId&status=created_success`).
    *   Si la création du produit ou du mouvement de stock a échoué :
        *   `ProductsController` recharge la vue `products/create.php` avec un message d'erreur général.

18. **Navigateur Web :**
    *   Suit la redirection (si succès) et affiche la page du produit nouvellement créé avec un message de succès.
    *   Ou affiche le formulaire de création à nouveau avec des erreurs.

**Fin de la Séquence.**
