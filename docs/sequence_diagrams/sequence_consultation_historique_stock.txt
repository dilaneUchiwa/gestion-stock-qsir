**Diagramme de Séquence : Consultation du Rapport des Mouvements de Stock**

**Acteurs :** Utilisateur, Navigateur Web, Serveur Web (PHP)

**Composants :**
*   Navigateur Web
*   Routeur (`public/index.php`)
*   `ReportController.php`
*   `ProductModel.php`
*   `StockMovementModel.php`
*   `Database.php` (Classe Core)
*   Base de Données (PostgreSQL)
*   Vue (`reports/stock_movements_report.php`, `layouts/main.php`)

**Séquence :**

1.  **Utilisateur -> Navigateur Web :**
    *   Accède à la page du rapport des mouvements de stock (ex: via un lien dans le menu "Rapports").
    *   Le navigateur envoie une requête GET (ex: `index.php?url=report/stock_movements_report`).
    *   L'utilisateur peut optionnellement soumettre le formulaire de filtres (date de début, date de fin, produit, type de mouvement), ce qui renvoie une requête GET avec ces paramètres.

2.  **Navigateur Web -> Serveur Web (Routeur) :**
    *   Le serveur reçoit la requête GET.
    *   Le Routeur analyse l'URL et détermine que `ReportController` et sa méthode `stock_movements_report()` doivent être appelés.

3.  **Routeur -> `ReportController::stock_movements_report()` :**
    *   La méthode `stock_movements_report()` est exécutée.
    *   `ReportController` charge `ProductModel` et `StockMovementModel`.
    *   Appelle `ProductModel->getAll()` pour peupler le filtre de sélection de produit.
    *   Récupère `StockMovementModel->allowedTypes` pour peupler le filtre de type de mouvement.
    *   Récupère les paramètres de filtre (`start_date`, `end_date`, `product_id`, `movement_type`) depuis `$_GET`, en appliquant des valeurs par défaut si absents.
    *   Appelle `StockMovementModel->getDetailedStockMovements($filters_array)` avec les filtres validés.

4.  **`ReportController` -> `ProductModel::getAll()` :**
    *   Exécute une requête SELECT sur la table `products` (avec jointures pour catégorie et unité de base si `getAll` est la version enrichie).
    *   Retourne la liste des produits.

5.  **`ReportController` -> `StockMovementModel::getDetailedStockMovements($filters_array)` :**
    *   Le modèle `StockMovement.php` construit une requête SQL SELECT complexe :
        *   Joint `stock_movements` avec `products` (pour le nom du produit et son `base_unit_id`).
        *   Joint `units` deux fois : une fois pour l'unité de base du produit (`u_base`), et une fois (LEFT JOIN) pour l'unité d'origine du mouvement (`u_orig` sur `sm.original_unit_id`).
        *   Construit dynamiquement la clause `WHERE` basée sur les filtres fournis (dates, produit, type de mouvement).
    *   Appelle `Database->select()` pour exécuter la requête.
    *   Retourne un tableau des mouvements de stock détaillés, incluant `product_name`, `base_unit_symbol`, `original_quantity`, `original_unit_symbol`, etc.

6.  **Modèles -> `Database` (plusieurs appels) :**
    *   Exécution des requêtes SELECT.

7.  **`Database` -> Modèles :**
    *   Les résultats des requêtes sont retournés aux modèles respectifs.

8.  **Modèles -> `ReportController` :**
    *   La liste des produits (pour les filtres) et la liste des mouvements de stock détaillés sont retournées au contrôleur.

9.  **`ReportController::stock_movements_report()` (suite) :**
    *   `ReportController` stocke les données récupérées.
    *   Appelle `renderView('reports/stock_movements_report', $data)` avec les mouvements, les listes pour les filtres, les filtres courants, et le titre de la page.

10. **`ReportController` -> Vue (`reports/stock_movements_report.php`, `layouts/main.php`) :**
    *   La vue `reports/stock_movements_report.php` est rendue.
    *   Elle affiche le formulaire de filtres, pré-rempli avec les filtres courants.
    *   Elle itère sur le tableau des mouvements et les affiche dans un tableau HTML.
    *   Pour chaque mouvement, elle affiche :
        *   Date, Nom du Produit, Type de Mouvement (traduit).
        *   Description (basée sur `related_document_type`, `related_document_id`, et `notes`).
        *   Quantité en Unité d'Origine (si `original_unit_id` est différent de l'unité de base et `original_quantity` est non null).
        *   Quantité en Unité de Base du Produit (le champ `quantity` du mouvement).

11. **Navigateur Web :**
    *   Affiche la page du rapport des mouvements de stock.

**Fin de la Séquence.**
